const tg = require('../libs/tg');
const weather = require('../libs/weather');
const log = require('../libs/log');
const moment = require('moment');

const express = require('express');
const router = express.Router();

router.post('/', async (req, res) => {
    log.debug(JSON.stringify(req.body));

    if (req.body.message) {
        let userId = req.body.message.chat.id;
        let userText = req.body.message.text;
        let userLocation = req.body.message.location;

        if (userText === '/start') {
            await tg.sendMessage(userId, helloMessage, helloKeyboard);
        }
        else if (userText === '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É‚õà') {
            await tg.sendMessage(userId, cityMessage, helloKeyboard);
        }
        else if (userText === '–ü—Ä–æ–≥–Ω–æ–∑üë©üèΩ‚Äçüíª') {
            await tg.sendMessage(userId, forecastMessage, helloKeyboard);
        }
        else if (userLocation) {
            let weatherData = await weather.getWeather(userLocation.latitude, userLocation.longitude);

            if (!weatherData) {
                await tg.sendMessage(userId, errorMessage);
                res.sendStatus(200);
                return;
            }

            await tg.sendMessage(userId, getWeatherMessage(weatherData.data), helloKeyboard);
        }
        else if (userText.toLowerCase().includes('–ø—Ä–æ–≥–Ω–æ–∑')) {
            let forecastCities = await weather.getCoordinates(userText.toLowerCase().replace(/(–ø—Ä–æ–≥–Ω–æ–∑:)/g, ''));

            if (!forecastCities) {
                await tg.sendMessage(userId, errorMessage, helloKeyboard);
                res.sendStatus(200);
                return;
            }

            if (forecastCities.data.length === 0) {
                await tg.sendMessage(userId, clarifyMessage, helloKeyboard);
                res.sendStatus(200);
                return;
            }

            for (let city of forecastCities.data) {
                await tg.sendMessage(
                    userId,
                    `–ù–∞–∑–≤–∞–Ω–∏–µ: ${city.name}\n–°—Ç—Ä–∞–Ω–∞: ${city.country}`,
                    false,
                    false,
                    [
                        [{text: `–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç`, callback_data: `${city.lat}/${city.lon}/–ø—Ä`}],
                        [{text: '–≠—Ç–æ –Ω–µ –æ–Ω‚ùå', callback_data: '–û—Ç–º–µ–Ω–∞'}]
                    ]
                );
                await tg.sendLocation(userId, city.lat, city.lon);
            }
        }
        else if (userText) {
            let cities = await weather.getCoordinates(userText);

            if (!cities) {
                await tg.sendMessage(userId, errorMessage, helloKeyboard);
                res.sendStatus(200);
                return;
            }

            if (cities.data.length === 0) {
                await tg.sendMessage(userId, clarifyMessage, helloKeyboard);
                res.sendStatus(200);
                return;
            }

            for (let city of cities.data) {
                await tg.sendMessage(
                    userId,
                    `–ù–∞–∑–≤–∞–Ω–∏–µ: ${city.name}\n–°—Ç—Ä–∞–Ω–∞: ${city.country}`,
                    false,
                    false,
                    [
                        [{text: `–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç`, callback_data: `${city.lat}/${city.lon}`}],
                        [{text: '–≠—Ç–æ –Ω–µ –æ–Ω‚ùå', callback_data: '–û—Ç–º–µ–Ω–∞'}]
                    ]
                );
                await tg.sendLocation(userId, city.lat, city.lon);
            }
        }
    }
    else if (req.body.callback_query) {
        if (!req.body.callback_query.message) {
            res.sendStatus(200);
            return;
        }

        let callback = req.body.callback_query.data;
        let text = req.body.callback_query.message.text.toLowerCase();
        let userId = req.body.callback_query.message.chat.id;
        let messageId = req.body.callback_query.message.message_id;

        let locationString = callback.split('/');
        let promises = [];
        let weatherData = null;

        if (callback === '–û—Ç–º–µ–Ω–∞') {
            promises.push(tg.editMessageText(userId, messageId, clarifyMessage, []));
            promises.push(tg.deleteMessage(userId, messageId + 1));
        }
        else if (text.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ')) {
            weatherData = locationString.includes('–ø—Ä') ? await weather.getForecast(locationString[0], locationString[1]) : await weather.getWeather(locationString[0], locationString[1]);

            if (!weatherData) {
                promises.push(tg.editMessageText(userId, messageId, errorMessage, []));
                promises.push(tg.deleteMessage(userId, messageId + 1));
                res.sendStatus(200);
                return;
            }

            promises.push(tg.editMessageText(
                userId,
                messageId,
                locationString.includes('–ø—Ä') ? getForecastWeatherMessage(weatherData.data) : getWeatherMessage(weatherData.data),
                []
            ));
            promises.push(tg.deleteMessage(userId, messageId + 1));
        }

        await Promise.all(promises);
    }

    res.sendStatus(200);
});

const helloMessage = '–ü—Ä–∏–≤–µ—Ç‚úå \n–Ø, WeatherFreeBotÔ∏è‚òÄÔ∏è\n' +
    '–ú–æ—è –º–∏—Å—Å–∏—è –ø–æ–º–æ—á—å —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≥–¥–µ —É–≥–æ–¥–Ω–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–ª–∞–Ω–µ—Ç—ã –ó–µ–º–ª—èüåê\n\n' +
    '–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—á–µ–Ω—å –ª–µ–≥–∫–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∑–∞ –æ–∫–Ω–æ–ºü™ü\n' +
    '–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–æ–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –ª–∏–±–æ –ø—Ä–∏–∫—Ä–µ–ø–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—éüìç\n\n' +
    '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏ —Å—Ä–∞–∑—É –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞üåÜ';

const cityMessage = '–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏ –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞üåÜ';

const forecastMessage = '–ù–∞–ø–∏—à–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ "–ü—Ä–æ–≥–Ω–æ–∑" –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞üåÜ\n–ü—Ä–æ–≥–Ω–æ–∑: –≥–æ—Ä–æ–¥';

const errorMessage = '–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Åüò≠\n–í —Å–∏–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤üí∞\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µü•∫';

const clarifyMessage = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞';

const helloKeyboard = [
    [
        { text: '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É‚õà' },
        { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–∏–∑–∏—Ü–∏—éüìç', request_location: true}
    ],
    [
        { text: '–ü—Ä–æ–≥–Ω–æ–∑üë©üèΩ‚Äçüíª' }
    ]
];

const getForecastWeatherMessage = (w) => {
    let timezone = w.city.timezone;
    let messageForecast = `<b>${w.city.name}</b>\n`;
    let i = 0;

    for (let listItem of w.list) {
        messageForecast += `${getDate(listItem.dt, timezone)}: <b>${listItem.main.temp.toFixed(2)}&#8451;</b>,` +
            `–≤–µ—Ä-—Ç—å –æ—Å–∞–¥. <b>${listItem.pop.toFixed(2) * 100.00}%</b>, ${listItem.weather[0].description}\n`;

        i++;
        if (i === 8) {
            i = 0;

            messageForecast += '\n';
        }
    }

    return messageForecast;
};

const getWeatherMessage = (w) => {
    let messagePrecipitation = '';

    if (w.rain) {
        messagePrecipitation += w.rain['1h'] ? `–û–±—ä–µ–º –¥–æ–∂–¥—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: <b>${w.rain['1h'].toFixed(2)}</b> –º–º\n` : '';
        messagePrecipitation += w.rain['3h'] ? `–û–±—ä–µ–º –¥–æ–∂–¥—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞: <b>${w.rain['3h'].toFixed(2)}</b> –º–º\n` : '';
    }

    if (w.snow) {
        messagePrecipitation += w.snow['1h'] ? `–û–±—ä–µ–º —Å–Ω–µ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: <b>${w.snow['1h'].toFixed(2)}</b> –º–º\n` : '';
        messagePrecipitation += w.snow['3h'] ? `–û–±—ä–µ–º —Å–Ω–µ–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞: <b>${w.snow['3h'].toFixed(2)}</b> –º–º\n` : '';
    }

    return `<b>${w.name}</b>\n` +
        `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>${w.main.temp.toFixed(2)}&#8451;</b>\n` +
        `–ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞–∫: <b>${w.main.feels_like.toFixed(2)}&#8451;</b>\n` +
        messagePrecipitation +
        `–í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>${w.main.humidity.toFixed(2)}%</b>\n` +
        `–û–±–ª–∞—á–Ω–æ—Å—Ç—å: <b>${w.clouds.all.toFixed(2)}%</b>\n` +
        `–í–∏–¥–∏–º–æ—Å—Ç—å: <b>${w.visibility.toFixed(2)}</b> –º–µ—Ç—Ä–æ–≤\n` +
        `–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: <b>${w.wind.speed.toFixed(2)}</b> –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${w.weather[0].description}\n` +
        `–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: ${getDate(w.sys.sunset, w.timezone)}\n` +
        `–°—Ç—Ä–∞–Ω–∞: ${w.sys.country}`;
};

const getDate = (dt, timezone) => {
    let utc_seconds = parseInt(dt, 10) + parseInt(timezone, 10);
    let utc_milliseconds = utc_seconds * 1000;

    return moment(utc_milliseconds).format('DD.MM.YYYY HH:mm');
}

const DATE_FORMAT = 'DD.MM.YYYY HH:mm';

module.exports = router;